'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.__esModule = true;

var _react = require('react');

var _mapValues = require('lodash/mapValues');

var _mapValues2 = _interopRequireDefault(_mapValues);

var _reducers = require('./reducers');

var _reducers2 = _interopRequireDefault(_reducers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FilterMonitor = (function (_Component) {
  _inherits(FilterMonitor, _Component);

  function FilterMonitor() {
    _classCallCheck(this, FilterMonitor);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  FilterMonitor.prototype.isNotFiltered = function isNotFiltered(actionType) {
    var type = actionType || '';
    return this.props.whitelist && type.match(this.props.whitelist.join('|')) || this.props.blacklist && !type.match(this.props.blacklist.join('|'));
  };

  FilterMonitor.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props;
    var whitelist = _props.whitelist;
    var blacklist = _props.blacklist;
    var actionsFilter = _props.actionsFilter;
    var statesFilter = _props.statesFilter;
    var monitorState = _props.monitorState;
    var children = _props.children;
    var actionsById = _props.actionsById;
    var stagedActionIds = _props.stagedActionIds;
    var computedStates = _props.computedStates;

    var rest = _objectWithoutProperties(_props, ['whitelist', 'blacklist', 'actionsFilter', 'statesFilter', 'monitorState', 'children', 'actionsById', 'stagedActionIds', 'computedStates']);

    var filteredStagedActionIds = [];
    var filteredComputedStates = [];
    var filteredActionsById = {};

    if (whitelist || blacklist) {
      stagedActionIds.forEach(function (id, idx) {
        if (_this2.isNotFiltered(actionsById[id].action.type)) {
          filteredStagedActionIds.push(id);
          filteredComputedStates.push(statesFilter ? _extends({}, computedStates[idx], { state: statesFilter(computedStates[idx].state, idx) }) : computedStates[idx]);
          filteredActionsById[id] = actionsFilter ? _extends({}, actionsById[id], { action: actionsFilter(actionsById[id].action, id) }) : actionsById[id];
        }
      });

      rest = _extends({}, rest, {
        actionsById: filteredActionsById,
        stagedActionIds: filteredStagedActionIds,
        computedStates: filteredComputedStates
      });
    } else {
      if (actionsFilter) {
        filteredActionsById = (0, _mapValues2.default)(actionsById, function (action, id) {
          return _extends({}, action, { action: actionsFilter(action.action, id) });
        });
      } else filteredActionsById = actionsById;

      if (statesFilter) {
        filteredComputedStates = computedStates.map(function (state, idx) {
          return _extends({}, state, { state: statesFilter(state.state, idx) });
        });
      } else filteredComputedStates = computedStates;

      rest = _extends({}, rest, {
        stagedActionIds: stagedActionIds,
        actionsById: filteredActionsById,
        computedStates: filteredComputedStates
      });
    }

    var childProps = _extends({}, rest, {
      monitorState: monitorState.childMonitorState || {}
    });
    return (0, _react.cloneElement)(children, childProps);
  };

  return FilterMonitor;
})(_react.Component);

FilterMonitor.update = _reducers2.default;
FilterMonitor.propTypes = {
  children: _react.PropTypes.element,
  whitelist: _react.PropTypes.array,
  blacklist: _react.PropTypes.array
};
exports.default = FilterMonitor;